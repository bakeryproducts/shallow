
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/learner.ipynb

import torch
import torch.nn as nn

from shallow import utils

class CancelFitException(Exception): pass

class Learner:
    def __init__(self, model, dls, loss_func, lr, cbs, opt_func, progress_bar, **kwargs):
        utils.store_attr(self, locals())
        for cb in self.cbs: cb.learner = self

    def one_batch(self):
        self('before_batch')
        xb,yb = self.batch
        self.preds = self.model(xb)
        self.loss = self.loss_func(self.preds, yb)
        if self.model.training:
            self('train_step')

        self('after_batch')

    def one_epoch(self, train):
        self.model.training = train
        self('before_epoch')
        self.dl = self.dls.TRAIN if train else self.dls.VALID
        for self.num, self.batch in enumerate(self.progress_bar.child_bar(self.dl, leave=False)):
            self.one_batch()
        self('after_epoch')

    def fit(self, n_epochs):
        self('before_fit')
        self.opt = self.opt_func()
        self.n_epochs = n_epochs
        self.progress_bar.master_bar, self.progress_bar.child_bar = self.progress_bar.init(range(self.n_epochs))
        try:
            for self.epoch in self.progress_bar.master_bar:
                self.one_epoch(True)
                #self.one_epoch(False)
                #self.progress_bar.master_bar.write(f'Finished loop {self.epoch}.')

        except CancelFitException: pass
        self('after_fit')

    def __call__(self, name):
        for cb in self.cbs: getattr(cb, name, utils.noop)()